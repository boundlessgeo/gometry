openapi: 3.0.1
info:
  description: A layer is a published resource (feature type or coverage).
  title: GeoServer Layers
  version: 1.0.0
servers:
- url: /
paths:
  /layers:
    delete:
      description: Invalid.
      operationId: layersDelete
      responses:
        405:
          content: {}
          description: Method not allowed.
    get:
      description: Displays a list of all layers on the server. You must use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers.xml" for XML)
      operationId: layersGet
      responses:
        200:
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Layers'
            application/xml:
              example: |
                <layers>
                   <layer>
                     <name>tiger:giant_polygon</name>
                     <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate"
                       href="http://localhost:8080/geoserver/rest/layers/tiger%3Agiant_polygon.xml"
                       type="application/xml"/>
                   </layer>
                   <layer>
                     <name>sf:bugsites</name>
                     <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate"
                       href="http://localhost:8080/geoserver/rest/layers/sf%3Abugsites.xml"
                       type="application/xml"/>
                   </layer>
                 </layers>
              schema:
                $ref: '#/components/schemas/Layers'
            application/json:
              example: |
                {
                  "layers": {
                    "layer": [
                      {
                        "name": "tiger:giant_polygon",
                        "href": "http:\/\/localhost:8080\/geoserver\/rest\/layers\/tiger%3Agiant_polygon.json"
                      },
                      {
                        "name": "sf:bugsites",
                        "href": "http:\/\/localhost:8080\/geoserver\/rest\/layers\/sf%3Abugsites.json"
                      },
                    ]
                  }
                }
              schema:
                $ref: '#/components/schemas/Layers'
          description: OK
      summary: Get a list of layers
    post:
      description: Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
      operationId: layersPost
      responses:
        405:
          content: {}
          description: Method not allowed.
    put:
      description: Invalid. To edit a layer, use PUT on an individual layer instead.
      operationId: layersPut
      responses:
        405:
          content: {}
          description: Method not allowed.
  /layers/{layerName}:
    delete:
      description: Deletes a layer from the server.
      operationId: layersNameDelete
      parameters:
      - description: The name of the layer to delete.
        in: path
        name: layerName
        required: true
        schema:
          type: string
      - description: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        in: query
        name: recurse
        schema:
          default: false
          type: boolean
      responses:
        200:
          content: {}
          description: OK
      summary: Delete layer
    get:
      description: Retrieves a single layer definition. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers/{layer}.xml" for XML).
      operationId: layersNameGet
      parameters:
      - description: The name of the layer to retrieve.
        in: path
        name: layerName
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/xml:
              example: |
                <layer>
                  <name>poi</name>
                  <path>/</path>
                  <type>VECTOR</type>
                  <defaultStyle>
                    <name>poi</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/poi.xml" type="application/xml"/>
                  </defaultStyle>
                  <styles class="linked-hash-set">
                    <style>
                      <name>burg</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/burg.xml" type="application/xml"/>
                    </style>
                    <style>
                      <name>point</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/point.xml" type="application/xml"/>
                    </style>
                  </styles>
                  <resource class="featureType">
                    <name>poi</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc/featuretypes/poi.xml" type="application/xml"/>
                  </resource>
                  <attribution>
                    <logoWidth>0</logoWidth>
                    <logoHeight>0</logoHeight>
                  </attribution>
                </layer>
              schema:
                $ref: '#/components/schemas/Layer'
            application/json:
              example: |
                {

                    "layer": {
                        "name": "poi",
                        "path": "/",
                        "type": "VECTOR",
                        "defaultStyle": {
                            "name": "poi",
                            "href": "http://localhost:8080/geoserver/rest/styles/poi.json"
                        },
                        "styles": {
                            "@class": "linked-hash-set",
                            "style": [
                                {
                                    "name": "burg",
                                    "href": "http://localhost:8080/geoserver/rest/styles/burg.json"
                                },
                                {
                                    "name": "point",
                                    "href": "http://localhost:8080/geoserver/rest/styles/point.json"
                                }
                            ]
                        },
                        "resource": {
                            "@class": "featureType",
                            "name": "poi",
                            "href": "http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc/featuretypes/poi.json"
                        },
                        "attribution": {
                            "logoWidth": 0,
                            "logoHeight": 0
                        }
                    }

                }
              schema:
                $ref: '#/components/schemas/Layer'
            text/html:
              schema:
                $ref: '#/components/schemas/Layer'
          description: OK
      summary: Retrieve a layer
    post:
      description: Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
      operationId: layersNamePost
      responses:
        405:
          content: {}
          description: Method not allowed.
    put:
      description: Modifies an existing layer on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers/{layer}.xml" for XML).
      operationId: layersNamePut
      parameters:
      - description: The name of the layer to modify.
        in: path
        name: layerName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Layer'
          application/json:
            schema:
              $ref: '#/components/schemas/Layer'
        description: The updated layer definition.
        required: true
      responses:
        200:
          content: {}
          description: The layer was successfully updated.
      summary: Modify a layer.
  /workspaces/{workspaceName}/layers:
    delete:
      description: Invalid.
      operationId: layersWorkspaceDelete
      responses:
        405:
          content: {}
          description: Method not allowed.
    get:
      description: Displays a list of all layers in the provided workspace. You must use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers.xml" for XML)
      operationId: layersWorkspaceGet
      parameters:
      - description: The name of the workspace to list layers in
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Layers'
            application/xml:
              example: |
                <layers>
                  <layer>
                    <name>bugsites</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate"
                      href="http://localhost:8080/geoserver/rest/workspaces/sf/layers/bugsites.xml"
                      type="application/xml"/>
                  </layer>
                </layers>
              schema:
                $ref: '#/components/schemas/Layers'
            application/json:
              example: |
                {
                  "layers": {
                    "layer": [
                      {
                        "name": "bugsites",
                        "href": "http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/sf\/layers\/bugsites.json"
                      },
                    ]
                  }
                }
              schema:
                $ref: '#/components/schemas/Layers'
          description: OK
      summary: Get a list of layers in a workspace.
    post:
      description: Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
      operationId: layersWorkspacePost
      responses:
        405:
          content: {}
          description: Method not allowed.
    put:
      description: Invalid. To edit a layer, use PUT on an individual layer instead.
      operationId: layersWorkspacePut
      responses:
        405:
          content: {}
          description: Method not allowed.
  /workspaces/{workspaceName}/layers/{layerName}:
    delete:
      description: Deletes a layer from the server.
      operationId: layersNameWorkspaceDelete
      parameters:
      - description: The name of the workspace the layer is in.
        in: path
        name: workspaceName
        required: true
        schema: {}
      - description: The name of the layer to delete.
        in: path
        name: layerName
        required: true
        schema:
          type: string
      - description: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        in: query
        name: recurse
        schema:
          default: false
          type: boolean
      responses:
        200:
          content: {}
          description: OK
      summary: Delete layer
    get:
      description: Retrieves a single layer definition. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers/{layer}.xml" for XML).
      operationId: layersNameWorkspaceGet
      parameters:
      - description: The name of the workspace the layer is in.
        in: path
        name: workspaceName
        required: true
        schema:
          type: string
      - description: The name of the layer to retrieve.
        in: path
        name: layerName
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/xml:
              example: |
                <layer>
                  <name>poi</name>
                  <path>/</path>
                  <type>VECTOR</type>
                  <defaultStyle>
                    <name>poi</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/poi.xml" type="application/xml"/>
                  </defaultStyle>
                  <styles class="linked-hash-set">
                    <style>
                      <name>burg</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/burg.xml" type="application/xml"/>
                    </style>
                    <style>
                      <name>point</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/point.xml" type="application/xml"/>
                    </style>
                  </styles>
                  <resource class="featureType">
                    <name>poi</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc/featuretypes/poi.xml" type="application/xml"/>
                  </resource>
                  <attribution>
                    <logoWidth>0</logoWidth>
                    <logoHeight>0</logoHeight>
                  </attribution>
                </layer>
              schema:
                $ref: '#/components/schemas/Layer'
            application/json:
              example: |
                {

                    "layer": {
                        "name": "poi",
                        "path": "/",
                        "type": "VECTOR",
                        "defaultStyle": {
                            "name": "poi",
                            "href": "http://localhost:8080/geoserver/rest/styles/poi.json"
                        },
                        "styles": {
                            "@class": "linked-hash-set",
                            "style": [
                                {
                                    "name": "burg",
                                    "href": "http://localhost:8080/geoserver/rest/styles/burg.json"
                                },
                                {
                                    "name": "point",
                                    "href": "http://localhost:8080/geoserver/rest/styles/point.json"
                                }
                            ]
                        },
                        "resource": {
                            "@class": "featureType",
                            "name": "poi",
                            "href": "http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc/featuretypes/poi.json"
                        },
                        "attribution": {
                            "logoWidth": 0,
                            "logoHeight": 0
                        }
                    }

                }
              schema:
                $ref: '#/components/schemas/Layer'
            text/html:
              schema:
                $ref: '#/components/schemas/Layer'
          description: OK
      summary: Retrieve a layer
    post:
      description: Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
      operationId: layersNameWorkspacePost
      responses:
        405:
          content: {}
          description: Method not allowed.
    put:
      description: Modifies an existing layer on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layers/{layer}.xml" for XML).
      operationId: layersNameWorkspacePut
      parameters:
      - description: The name of the workspace the layer is in.
        in: path
        name: workspaceName
        required: true
        schema: {}
      - description: The name of the layer to modify.
        in: path
        name: layerName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Layer'
          application/json:
            schema:
              $ref: '#/components/schemas/Layer'
        description: The updated layer definition.
        required: true
      responses:
        200:
          content: {}
          description: The layer was successfully updated.
      summary: Modify a layer.
components:
  schemas:
    Identifier:
      example:
        identifier: identifier
        authority: authority
      properties:
        identifier:
          description: Work citied, often a data standard provided by
          type: string
        authority:
          description: Authority cited, for details see authorityURLs
          type: string
    Layer_attribution:
      description: WMS attribution information to be drawn on each map
      example:
        logoHeight: 0
        logoWidth: 6
        href: href
        title: title
        logoType: logoType
        logoURL: logoURL
      properties:
        logoHeight:
          description: Data provider logo height
          type: integer
        logoWidth:
          description: Data provider logo width
          type: integer
        href:
          description: URL to data provider
          type: string
        title:
          description: Human-readable text describing the data provider
          type: string
        logoType:
          description: Format of data provider logo, example "image/png"
          type: string
        logoURL:
          description: Data provider logo
          type: string
    Layer_resource:
      description: Resource supplying information for layer publication
      example:
        '@class': featureType
        name: name
        link: link
      properties:
        '@class':
          default: featureType
          description: required value featureType
          enum:
          - featureType
          type: string
        name:
          description: Name of resource
          type: string
        link:
          description: URL to the resource definition
          readOnly: true
          type: string
    MetadataEntry:
      example:
        '@key': buffer
        $: $
      properties:
        '@key':
          description: Key used for metadata entry, additional keys are added over time
          enum:
          - buffer
          title: key
          type: string
        $:
          description: Text value for provided key Valid text depends on key used. Example  {'@key'='buffer','$'='5'}") or <entry key="buffer">5</entry>
          title: text
          type: string
      title: entry
      type: object
    Layer_styles:
      description: Avaialble styles for layer publication
      example:
        '@class': linked-hash-set
        style:
        - name: name
          link: link
        - name: name
          link: link
      properties:
        '@class':
          description: required value linked-hash-set.
          enum:
          - linked-hash-set
          type: string
        style:
          items:
            $ref: '#/components/schemas/StyleReference'
          type: array
    AuthorityURL:
      example:
        name: name
        href: href
      properties:
        name:
          description: Authory name, describing the industry, national or international origanization responsible for data product standard.
          type: string
        href:
          description: URL to authority organization
          type: string
    LayerReference:
      example:
        name: name
        link: link
      properties:
        name:
          description: Name of layer
          type: string
        link:
          description: URL to layer definition
          type: string
      title: layers
      type: object
    StyleReference:
      description: Reference to style definition
      example:
        name: name
        link: link
      properties:
        name:
          description: Name of style
          type: string
        link:
          description: URL to the style definition
          readOnly: true
          type: string
      title: style
      type: object
    Layers:
      example:
        layers:
          name: name
          link: link
      properties:
        layers:
          $ref: '#/components/schemas/LayerReference'
      title: layers
      type: object
    Layer:
      example:
        path: path
        metadata:
        - '@key': buffer
          $: $
        - '@key': buffer
          $: $
        opaque: true
        defaultStyle:
          name: name
          link: link
        resource:
          '@class': featureType
          name: name
          link: link
        identifiers:
        - identifier: identifier
          authority: authority
        - identifier: identifier
          authority: authority
        authorityURLs:
        - name: name
          href: href
        - name: name
          href: href
        name: name
        attribution:
          logoHeight: 0
          logoWidth: 6
          href: href
          title: title
          logoType: logoType
          logoURL: logoURL
        styles:
          '@class': linked-hash-set
          style:
          - name: name
            link: link
          - name: name
            link: link
        type: VECTOR
      properties:
        name:
          description: Name of the layer
          type: string
        path:
          description: Location of the layer in the WMS capabilities layer tree
          type: string
        type:
          description: Type of published layer. Can be VECTOR, RASTER, REMOTE, WMS or GROUP. Must be consistent with resource definition.
          enum:
          - VECTOR
          - RASTER
          - REMOTE
          - WMS
          - GROUP
          type: string
        defaultStyle:
          $ref: '#/components/schemas/StyleReference'
        styles:
          $ref: '#/components/schemas/Layer_styles'
        resource:
          $ref: '#/components/schemas/Layer_resource'
        opaque:
          description: Controls layer transparency (whether the layer is opaque or transparent).
          type: boolean
        metadata:
          items:
            $ref: '#/components/schemas/MetadataEntry'
          type: array
        attribution:
          $ref: '#/components/schemas/Layer_attribution'
        authorityURLs:
          items:
            $ref: '#/components/schemas/AuthorityURL'
          type: array
        identifiers:
          items:
            $ref: '#/components/schemas/Identifier'
          type: array
      title: layer
      type: object
      xml:
        name: layer
